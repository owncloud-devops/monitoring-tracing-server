### Traefik settings ###
# Serve Treafik dashboard. Defaults to "false".
TRAEFIK_DASHBOARD=
# Domain of Traefik, where you can find the dashboard. Defaults to "traefik.owncloud.test"
TRAEFIK_DOMAIN=
# Basic authentication for the dashboard. Defaults to user "admin" and password "admin"
TRAEFIK_BASIC_AUTH_USERS=
# Email address for obtaining LetsEncrypt certificates, needs only be changed if this is a public facing server
TRAEFIK_ACME_MAIL=

### Grafana settings ###
# Domain of Grafana, where you can find the dashboards. Defaults to "grafana.owncloud.test"
# Please not that Grafana is configured to make all dashboards publicly available.
GRAFANA_DOMAIN=
# Grafana admin user. Defaults to admin
GRAFANA_USER=
# Grafana admin user password. Defaults to admin
GRAFANA_PASSWORD=

### Kibana settings ###
# Expose Kibana via Treafik. Defaults to false.
KIBANA_EXPOSED=
# Domain of Kibana, where you can find the dashboards. Defaults to "kibana.owncloud.test"
KIBANA_DOMAIN=
# Basic authentication for Kibana. Defaults to user "admin" and password "admin"
KIBANA_BASIC_AUTH_USERS=

### Jaeger UI settings ###
# Domain of Jaeger Query, where you can query the traces. Defaults to "jaeger.owncloud.test"
# Please not that there is no authentication in place!
JAEGER_QUERY_DOMAIN=

### Jaeger Collector settings ###
# Domain of Jaeger Collector, where you traces can be sent to. Defaults to "jaeger-collector.owncloud.test"
# Please not that there is no authentication in place!
JAEGER_COLLECTOR_DOMAIN=

### Prometheus settings ###
# Domain of Jaeger Collector, where you traces can be sent to. Defaults to "jaeger-collector.owncloud.test"
# Please not that there is no authentication in place!
PROMETHEUS_DOMAIN=

### Telegraf settings ###
# Hostname for Telegraf which will be used for selecting hosts in Grafana dasboards. Defaults to "telemetry.infra.owncloud.test"
# This option is used analouge to the one in https://github.com/owncloud-devops/monitoring-tracing-client/blob/master/.env.dist
TELEMETRY_SERVE_DOMAIN=

# set the docker group id from the host, so that telegraf can collect metrics from the docker socket
# gid can by gathered by running: `echo $(stat -c '%g' /var/run/docker.sock)`
HOST_DOCKER_GROUP_ID=
