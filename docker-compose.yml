---
version: "3.7"

services:
  traefik:
    image: traefik:v2.6@sha256:b22bd53ef626cf3667390c3e3651936b08f9c0c9107e3a6faf02e6dc06b3e0c0
    command:
      - "--log.level=${TRAEFIK_LOG_LEVEL:-ERROR}"
      # letsencrypt configuration
      - "--certificatesResolvers.http.acme.email=${TRAEFIK_ACME_MAIL:-example@example.org}"
      - "--certificatesResolvers.http.acme.storage=/certs/acme.json"
      - "--certificatesResolvers.http.acme.httpChallenge.entryPoint=http"
      # enable dashboard
      - "--api.dashboard=true"
      # define entrypoints
      - "--entryPoints.http.address=:80"
      - "--entryPoints.http.http.redirections.entryPoint.to=https"
      - "--entryPoints.http.http.redirections.entryPoint.scheme=https"
      - "--entryPoints.https.address=:443"
      # docker provider (get configuration from container labels)
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedByDefault=false"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "certs:/certs"
    labels:
      - "traefik.enable=${TRAEFIK_DASHBOARD:-false}"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=${TRAEFIK_BASIC_AUTH_USERS:-admin:$apr1$4vqie50r$YQAmQdtmz5n9rEALhxJ4l.}" # defaults to admin:admin
      - "traefik.http.routers.traefik.entrypoints=https"
      - "traefik.http.routers.traefik.rule=Host(`${TRAEFIK_DOMAIN:-traefik.owncloud.test}`)"
      - "traefik.http.routers.traefik.middlewares=traefik-auth"
      - "traefik.http.routers.traefik.tls.certresolver=http"
      - "traefik.http.routers.traefik.service=api@internal"
    logging:
      driver: "local"
    restart: always

  grafana:
    image: grafana/grafana:8.3.4@sha256:cf81d2c753c8d14cf0324d881e49f42d400347d256e473856e1bda02eb520a99
    volumes:
      - grafana:/var/lib/grafana
      - ./config/grafana/dashboards/:/etc/grafana/dashboards/
      - ./config/grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN:-grafana.owncloud.test}
      - GF_SERVER_ROOT_URL=https://${GRAFANA_DOMAIN:-grafana.owncloud.test}
      - GF_AUTH_BASIC_ENABLED=false
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-github-datasource,grafana-clock-panel
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/dashboards/home.json
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.entrypoints=https"
      - "traefik.http.routers.grafana.rule=Host(`${GRAFANA_DOMAIN:-grafana.owncloud.test}`)"
      - "traefik.http.routers.grafana.tls.certresolver=http"
      - "traefik.http.routers.grafana.service=grafana"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    logging:
      driver: "local"
    restart: always

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.3@sha256:0efc3a054ae97ad00cccc33b9ef79ec022970b2a9949893db4ef199edcdca2ce
    environment:
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms2G -Xmx2G
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 4g
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
      - ./config/elasticsearch/config.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    logging:
      driver: "local"
    restart: always

  kibana:
    image: docker.elastic.co/kibana/kibana:7.16.3@sha256:6c9867bd8e91737db8fa73ca6f522b2836ed1300bcc31dee96e62dc1e6413191
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    ports:
      - "127.0.0.1:5601:5601"
    labels:
      - "traefik.enable=${KIBANA_EXPOSED:-false}"
      - "traefik.http.routers.kibana.entrypoints=https"
      - "traefik.http.routers.kibana.rule=Host(`${KIBANA_DOMAIN:-kibana.owncloud.test}`)"
      - "traefik.http.routers.kibana.tls.certresolver=http"
      - "traefik.http.routers.kibana.service=kibana"
      - "traefik.http.services.kibana.loadbalancer.server.port=5601"
      - "traefik.http.middlewares.kibana-auth.basicauth.users=${KIBANA_BASIC_AUTH_USERS:-admin:$apr1$4vqie50r$YQAmQdtmz5n9rEALhxJ4l.}" # defaults to admin:admin
      - "traefik.http.routers.kibana.middlewares=kibana-auth"
    logging:
      driver: "local"
    restart: always

  jaeger-collector:
    image: jaegertracing/jaeger-collector:1.30.0@sha256:7b9db0e38a543a09ff69939439bb2e144950c0f87acbca17d42e313bc8b23949
    command: |
      --span-storage.type=elasticsearch
      --es.server-urls=http://elasticsearch:9200
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jaeger-collector.entrypoints=https"
      - "traefik.http.routers.jaeger-collector.rule=Host(`${JAEGER_COLLECTOR_DOMAIN:-jaeger-collector.owncloud.test}`)"
      - "traefik.http.routers.jaeger-collector.tls.certresolver=http"
      - "traefik.http.routers.jaeger-collector.service=jaeger-collector"
      - "traefik.http.services.jaeger-collector.loadbalancer.server.scheme=h2c"
      - "traefik.http.services.jaeger-collector.loadbalancer.server.port=14250"
    logging:
      driver: "local"
    restart: always

  jaeger-query:
    image: jaegertracing/jaeger-query:1.30.0@sha256:da3b528acdb67b39b805b7e6a3935ea719670ac308d00637b44357c5ce3e0cef
    command: |
      --span-storage.type=elasticsearch
      --es.server-urls=http://elasticsearch:9200
      --es.sniffer=false
    labels:

      - "traefik.enable=true"
      - "traefik.http.routers.jaeger-query.entrypoints=https"
      - "traefik.http.routers.jaeger-query.rule=Host(`${JAEGER_QUERY_DOMAIN:-jaeger.owncloud.test}`)"
      - "traefik.http.routers.jaeger-query.tls.certresolver=http"
      - "traefik.http.routers.jaeger-query.service=jaeger-query"
      - "traefik.http.services.jaeger-query.loadbalancer.server.port=16686"
      # you can protect your jaeger query instance with basic auth
      #- "traefik.http.middlewares.jaeger-query-auth.basicauth.users=${JAEGER_QUERY_BASIC_AUTH_USERS:-admin:$apr1$4vqie50r$YQAmQdtmz5n9rEALhxJ4l.}" # defaults to admin:admin
      #- "traefik.http.routers.jaeger-query.middlewares=jaeger-query-auth"
    logging:
      driver: "local"
    restart: always

  prometheus:
    image: prom/prometheus:v2.32.1@sha256:cb9817249c346d6cfadebe383ed3b3cd4c540f623db40c4ca00da2ada45259bb
    command:
      - "--web.external-url=https://${PROMETHEUS_DOMAIN:-prometheus.owncloud.test}"
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    volumes:
      - ./config/prometheus/scrape_targets:/etc/prometheus/scrape_targets:ro
      - ./config/prometheus/config.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    labels:

      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.entrypoints=https"
      - "traefik.http.routers.prometheus.rule=Host(`${PROMETHEUS_DOMAIN:-prometheus.owncloud.test}`)"
      - "traefik.http.routers.prometheus.tls.certresolver=http"
      - "traefik.http.routers.prometheus.service=prometheus"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      # you can protect your prometheus instance with basic auth
      #- "traefik.http.middlewares.prometheus-auth.basicauth.users=${PROMETHEUS_BASIC_AUTH_USERS:-admin:$apr1$4vqie50r$YQAmQdtmz5n9rEALhxJ4l.}" # defaults to admin:admin
      #- "traefik.http.routers.prometheus.middlewares=prometheus-auth"
    logging:
      driver: "local"
    restart: always

  telegraf:
    image: telegraf:1.21.2@sha256:152cd245fb4f6a5aabb31dfef4717f3e2411475bb8eef0789d6289b67c911408
    user: telegraf:${HOST_DOCKER_GROUP_ID} # host docker group id, so that telegraf has access to the docker socket
    command: | # only use config directory, but therefore we need to give a empty config file
      --config-directory /etc/telegraf/telegraf.d/
      --config /dev/null
    volumes:
      - ./config/telegraf:/etc/telegraf/telegraf.d:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /:/hostfs:ro
    environment:
      HOSTNAME: ${TELEMETRY_SERVE_DOMAIN:-telemetry.infra.owncloud.test}
      HOST_ETC: /hostfs/etc
      HOST_PROC: /hostfs/proc
      HOST_SYS: /hostfs/sys
      HOST_VAR: /hostfs/var
      HOST_RUN: /hostfs/run
      HOST_MOUNT_PREFIX: /hostfs
    logging:
      driver: "local"
    restart: always

volumes:
  certs:
  elasticsearch-data:
  prometheus-data:
  grafana:
